plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "io.github.goooler.shadow" version "8.1.8"
    id 'io.freefair.lombok' version '8.6'
}

def targetJavaVersion = 21
group = project.maven_group

repositories {
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://repo.papermc.io/repository/maven-public/" }
    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        mavenContent { snapshotsOnly() }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    compileOnly "com.velocitypowered:velocity-api:${project.velocity_version}"
    annotationProcessor "com.velocitypowered:velocity-api:${project.velocity_version}"

    modImplementation "net.kyori:adventure-platform-fabric:${project.adventure_version}"

    // SQL Drivers
    shadow implementation("org.xerial:sqlite-jdbc:${project.sqlite_version}")
    shadow implementation("org.mariadb.jdbc:mariadb-java-client:${project.mariadb_version}")
    shadow implementation("org.postgresql:postgresql:${project.postgres_version}")
    shadow implementation("com.zaxxer:HikariCP:${project.hikari_version}")
    // Config
    shadow implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-toml:${project.jackson_version}")

    // Extra
    compileOnly "org.projectlombok:lombok:1.18.32"
	annotationProcessor "org.projectlombok:lombok:1.18.32"
    modImplementation "maven.modrinth:easy-eula:1.1.0-fabric"
}

shadowJar {
    archiveBaseName.set('sqlib')
    configurations = [project.configurations.shadow]

    relocate 'com.fasterxml', 'me.mrnavastar.fasterxml'

    dependencies {
        mergeServiceFiles()
        exclude(dependency('org.slf4j:.*:.*'))
        exclude(dependency('net.java.dev.jna:.*:.*'))
    }
}

jar.finalizedBy('shadowJar')


/*test {
    useJUnitPlatform()
}*/

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    withJavadocJar()
    withSourcesJar()
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
