plugins {
    id 'fabric-loom' version '1.5.5'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.freefair.lombok' version '8.4'
}

def targetJavaVersion = 17
group = project.maven_group

repositories {
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://repo.papermc.io/repository/maven-public/" }
    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        mavenContent { snapshotsOnly() }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Paper
    compileOnly "io.papermc.paper:paper-api:${project.paper_version}"
    modImplementation "net.kyori:adventure-platform-fabric:${project.adventure_version}"

    // SQL Drivers
    shadow implementation("org.xerial:sqlite-jdbc:${project.sqlite_version}")
    shadow implementation("org.mariadb.jdbc:mariadb-java-client:${project.mariadb_version}")
    shadow implementation("com.zaxxer:HikariCP:${project.hikari_version}")
    // Config
    shadow implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-toml:${project.jackson_version}")

    // Extra
    compileOnly "org.projectlombok:lombok:1.18.30"
	annotationProcessor "org.projectlombok:lombok:1.18.30"
    modImplementation "maven.modrinth:easy-eula:1.0.0"
}

shadowJar {
    archiveBaseName.set('sqlib')
    configurations = [project.configurations.shadow]

    dependencies {
        mergeServiceFiles()
    }
}

jar.finalizedBy('shadowJar')

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)

    inputFile = file(shadowJar.archivePath)
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    withJavadocJar()
    withSourcesJar()
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
